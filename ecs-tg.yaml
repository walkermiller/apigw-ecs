Parameters:
  image:
    Type: String
  port:
    Type: Number
Resources:
  listenerSecurityGroupsg0bd4f65ff4806a9c3toEcsStackserviceSecurityGroupBB4C628DIndirectPort8ED2DCDB:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: sg-0bd4f65ff4806a9c3
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - serviceSecurityGroupF051F0EB
          - GroupId
      FromPort:
        Ref: port
      ToPort:
        Ref: port
    Metadata:
      aws:cdk:path: EcsStack/listener/SecurityGroup-sg-0bd4f65ff4806a9c3/to EcsStackserviceSecurityGroupBB4C628D:{IndirectPort}
  listenerlisttgC3C6F629:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn:
            Ref: tg2DCFFD86
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - /second
      ListenerArn: arn:aws:elasticloadbalancing:us-east-2:851165779994:listener/app/Apigw-farga-XZZONNTPQ719/8e737dd53aca70c7/d44b276696f0ebb3
      Priority: 10
    Metadata:
      aws:cdk:path: EcsStack/listener/listtg/Resource
  ecscluster7830E7B5:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
    Metadata:
      aws:cdk:path: EcsStack/ecs-cluster/Resource
  ecsclusterB48992C7:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      Cluster:
        Ref: ecscluster7830E7B5
      DefaultCapacityProviderStrategy: []
    Metadata:
      aws:cdk:path: EcsStack/ecs-cluster/ecs-cluster
  tg2DCFFD86:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: "false"
      TargetType: ip
      VpcId: vpc-04ac1d1b90b05b743
    Metadata:
      aws:cdk:path: EcsStack/tg/Resource
  taskdefTaskRole1E652319:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: EcsStack/taskdef/TaskRole/Resource
  taskdef8C9C43DE:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image:
            Ref: image
          Name: container
          PortMappings:
            - ContainerPort:
                Ref: port
              HostPort:
                Ref: port
              Protocol: tcp
      Cpu: "256"
      Family: EcsStacktaskdef2A2E3AE6
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - taskdefTaskRole1E652319
          - Arn
    Metadata:
      aws:cdk:path: EcsStack/taskdef/Resource
  serviceService7DDC3B7C:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: ecscluster7830E7B5
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: container
          ContainerPort:
            Ref: port
          TargetGroupArn:
            Ref: tg2DCFFD86
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - serviceSecurityGroupF051F0EB
                - GroupId
          Subnets:
            - subnet-01add05cdd0e99ac4
            - subnet-05df84fdcd7e0ad3e
            - subnet-03d614f675be9b8ee
      PlatformVersion: 1.4.0
      TaskDefinition:
        Ref: taskdef8C9C43DE
    DependsOn:
      - listenerlisttgC3C6F629
    Metadata:
      aws:cdk:path: EcsStack/service/Service
  serviceSecurityGroupF051F0EB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EcsStack/service/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId: vpc-04ac1d1b90b05b743
    Metadata:
      aws:cdk:path: EcsStack/service/SecurityGroup/Resource
  serviceSecurityGroupfromEcsStacklistenerSecurityGroupsg0bd4f65ff4806a9c3D5643ACDIndirectPort1E5102DB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort:
        Ref: port
      GroupId:
        Fn::GetAtt:
          - serviceSecurityGroupF051F0EB
          - GroupId
      SourceSecurityGroupId: sg-0bd4f65ff4806a9c3
      ToPort:
        Ref: port
    Metadata:
      aws:cdk:path: EcsStack/service/SecurityGroup/from EcsStacklistenerSecurityGroupsg0bd4f65ff4806a9c3D5643ACD:{IndirectPort}
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/2VQy27CQAz8Fu7LUkA99FZEH6rUQxT4Adcx1CXsRraXCkX5924StYJysmfsnRnv3M+XC383eYRvnWJ1mLUYhXy7McCDW+9CAQJHMhJXksYkSG4dg5oktH7+y3auV2gJF77N9IYwCdv5VWJqnvdCqu6Kc/+Xboi3MDzrHNWgxlhHqD6ghoAc9qdss2qamhGMY3hnNQokZaqpF7rCF3tbkD3Zn98FzDaoOXqdtD82D2/bNTSAOV4h8cQVyUo1Ig/C6raghyfaceAej+rXTAwGnENdcC85ABhtSE6MNH7B0HaO4ejbMo739LXrOlec7TOG2dI/+PvJlzJPJQXjI/lyrD8Vn0JU0AEAAA==
    Metadata:
      aws:cdk:path: EcsStack/CDKMetadata/Default

